#include<bits/stdc++.h>
 
using namespace std;
typedef long long ll;
 
inline long long input()
{
    long long n=0;
    int ch=getchar_unlocked();
 
    while( ch >= '0' && ch <= '9' )
        n = (n<<3)+(n<<1) + ch-'0', ch=getchar_unlocked();
 
    return n;
}
 
bool possible(ll cap[],vector<pair<ll,ll> > & v,ll n,ll m,ll value,ll temp){
 
    /*vector<ll> sec(n);
    for(int i=0;i<n;i++){
        sec[i]=v[i].second;
    }*/
    
    
 
    ll index=n-1,flag=0;
    ll rem=v[index].second;
    for(ll i=m-1;i>=0;i--){
        ll x=cap[i];
        ll avail=value;
        for(ll j=index;j>=0;j--){
            if(rem==0){
                rem=v[j].second;
            }
            if(rem>0){
                if(x>=v[j].first){
                    if(rem==avail){
                        temp-=avail;
                        rem=0;
                        avail=0;
                        index-=1;
                    }
                    else if(rem<avail){
                        avail-=rem;
                        temp-=rem;
                        rem=0;
                        index-=1;
                    }
                    else if(rem>avail){
                        rem-=avail;
                        temp-=avail;
                        avail=0;
                    }
                }
                else{
                    return false;
                }
            }
            if(temp<=0){
                return true;
            }
            if(avail==0){
                break;
            }
        }
        if(temp<=0){
            return true;
        }
        if(index<0 && temp>0){
            return false;
        }
    }
 
    if(temp<=0){
        return true;
    }
 
    return false;
}
 
int main()
{
    std::ios_base::sync_with_stdio(false);
    cin.tie();
    cout.tie();
    
    //freopen("input.txt","r",stdin);
    //freopen("output.txt","w",stdout);
 
    ll t;
    t=input();
    while(t--){
 
        ll n,m;
        n=input();
        m=input();
 
        ll cap[m];
        for(int i=0;i<m;i++){
            cap[i]=input();
        }
 
        vector<pair<ll,ll> > v(n);
        for(int i=0;i<n;i++){
            v[i].first=input();
        }
 
        ll start=1;
        ll end=0;
 
        for(int i=0;i<n;i++){
            v[i].second=input();
            end+=v[i].second;
        }
 
        ll time=1;
 
        sort(v.begin(),v.end());
        sort(cap,cap+m);
 
        if(v[n-1].first>cap[m-1]){
            cout<<"-1"<<endl;
            continue;
        }
 
        ll temp=end;
        end=end/2;
        while(start<=end){
 
            ll mid=(start+end)/2;
            if(possible(cap,v,n,m,mid,temp)){
                time=mid;
                end=mid-1;
            }
            else{
                start=mid+1;
            }
        }
 
        cout<<time<<endl;
        continue;
    }
    return 0;
}
