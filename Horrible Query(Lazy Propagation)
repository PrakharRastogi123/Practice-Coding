#include<bits/stdc++.h>
using namespace std;
long long int lazy[4*100005];
long long int tree[4*100005];
int arr[100005]={0};
void bt(int si,int ei,int ti){
   if(si>ei){
    return;
   }
 
   if(si==ei){
        tree[ti]=arr[si];
        return;
    }
    int mid=(si+ei)/2;
    bt(si,mid,2*ti);
    bt(mid+1,ei,2*ti+1);
    tree[ti]=tree[2*ti]+tree[2*ti+1];
}
void up(int si,int ei,int ti,int l,int r,long long inc){
    if(si>ei){
        return;
    }
    if(lazy[ti]!=0){
         tree[ti]+=(ei-si+1)*lazy[ti];
        if(si!=ei){
            lazy[2*ti]+=lazy[ti];
            lazy[2*ti+1]+=lazy[ti];
        }
        lazy[ti]=0;
    }
    if(si>r || ei<l){
        return;
    }
    if(si>=l && ei<=r){
         tree[ti]+=(ei-si+1)*inc;
        if(si!=ei){
            lazy[2*ti]+=inc;
            lazy[2*ti+1]+=inc;
        }
        return;
    }
    int mid=(si+ei)/2;
    up(si,mid,2*ti,l,r,inc);
    up(mid+1,ei,2*ti+1,l,r,inc);
    tree[ti]=tree[2*ti]+tree[2*ti+1];
}
long long int querry(int si,int ei,int ti,int l,int r){
     if(lazy[ti]!=0)
    {
         tree[ti]+=(ei-si+1)*lazy[ti];
        if(si!=ei)
        {
            lazy[2*ti]+=lazy[ti];
            lazy[2*ti+1]+=lazy[ti];
        }
        lazy[ti]=0;
    }
    if(si>r || ei<l){
        return 0;
    }
    if(si>=l && ei<=r){
        return tree[ti];
    }
    int mid=(si+ei)/2;
    long long ans1=querry(si,mid,2*ti,l,r);
    long long ans2=querry(mid+1,ei,2*ti+1,l,r);
    return (ans1+ans2);
}
int main() {
    int t;cin>>t;
    int n,c;
    while(t--){
        cin>>n>>c;
        memset(tree,0,sizeof(tree));
        memset(lazy,0,sizeof(lazy));
	bt(0,n-1,1);
	int l,r;
	long long int inc;
        	while(c--){
            	int w;cin>>w;
            	if(w==1){
                	cin>>l>>r;
                	cout<<querry(0,n-1,1,l-1,r-1)<<endl;	
            	}
            	else{               
			cin>>l>>r>>inc;
                	up(0,n-1,1,l-1,r-1,inc);
            }
        }
    }
    
}
