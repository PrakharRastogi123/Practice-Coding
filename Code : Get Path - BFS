#include <queue>
#include <iostream>
#include <unordered_map>
using namespace std;
 vector<int>* bfs(int **arr,int n,int sv,int ev){
     queue<int> q;
     bool *visit=new bool[n];
     for(int i=0;i<n;i++){
         visit[i]=false;
     }
     q.push(sv);
     visit[sv]=true;
     unordered_map<int,int> parent;
     bool done=false;
     while(!q.empty() && !done){
         int front=q.front();
         q.pop();
         for(int i=0;i<n;i++){
             if(arr[front][i]==1 && !visit[i]){
                 parent[i]=front;
                 q.push(i);
                 visit[i]=true;
                 if(i==ev){
                     done=true;
                     break;
                 }
             }
         }
     }
     delete [] visit;
     if(!done){
         return NULL;
     }
     else{
         vector <int> *output=new vector<int>();
         output->push_back(ev);
         int current=ev;
         while(current!=sv){
             current=parent[current];
             output->push_back(current);
         }
         return output;
     }
 }
int main()
{
int n,e;cin>>n>>e;
    int **arr=new int*[n];
    for(int i=0;i<n;i++){
        arr[i]=new int[n];
        for(int j=0;j<n;j++){
            arr[i][j]=0;
        }
    }
    for(int i=0;i<e;i++){
        int f,s;cin>>f>>s;
        arr[f][s]=1;
        arr[s][f]=1;
    }
    int sv,ev;cin>>sv>>ev;
    vector <int>* output=bfs(arr,n,sv,ev);
    if(output!=NULL){
        for(int i=0;i<output->size();i++){
            cout<<output->at(i)<<" ";
        }
        delete output;
    }
    for(int i=0;i<n;i++){
        delete[] arr[i];
    }
    delete [] arr;
    return 0;
} 
