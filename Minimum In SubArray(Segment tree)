#include<bits/stdc++.h>
using namespace std;
int min(int a,int b){
  return (a<b)?a:b;
}
int arr[100004];
int tree[4*100004];
void bt(int *arr,int *tree,int si,int ei,int ti){
  if(si==ei){
    tree[ti]=arr[si];
    return;
  }
  int mid=(si+ei)/2;
  bt(arr,tree,si,mid,2*ti);
  bt(arr,tree,mid+1,ei,2*ti+1);
  tree[ti]=min(tree[2*ti],tree[2*ti+1]);
}
void update(int *arr,int *tree,int si,int ei,int ti,int idx,int val){
  if(si==ei){
    arr[idx]=val;
    tree[ti]=val;
    return;
  }
  int mid=(si+ei)/2;
  if(idx<=mid){
    update(arr,tree,si,mid,2*ti,idx,val);
  }
  else{
    update(arr,tree,mid+1,ei,2*ti+1,idx,val);
  }
  tree[ti]=min(tree[2*ti],tree[2*ti+1]);
}
int qry(int *tree,int si,int ei,int ti,int l,int r){
  if(si>r || ei<l){
    return INT_MAX;
  }
  if(si>=l && ei<=r){
    return tree[ti];
  }
  int mid=(si+ei)/2;
  int ans1=qry(tree,si,mid,2*ti,l,r);
  int ans2=qry(tree,mid+1,ei,2*ti+1,l,r);
  return min(ans1,ans2);
}
int main() {
	int n,qr;
	cin>>n>>qr;
	//int *arr=new int[n];
	//int *tree=new int[2*n];
  	for(int i=0;i<n;i++){
      cin>>arr[i];
    }
  	bt(arr,tree,0,n-1,1);
  //for(int i=1;i<2*n;i++){
  //  cout<<tree[i]<<endl;
  //}
  	char r;
  	int lft,rgt;
  	while(qr--){
      cin>>r>>lft>>rgt;
      if(r=='q'){
        int ans=qry(tree,0,n-1,1,lft-1,rgt-1);
        cout<<ans<<endl;
      }
      if(r=='u'){
        update(arr,tree,0,n-1,1,lft-1,rgt);
      }
    }

}
