#define n1 1000002 
#define ll long long int 
  
ll phi[n1 + 2], ans[n1 + 2]; 
  
// Euler totient Function 
void ETF() 
{ 
    for (int i = 1; i <= n1; i++) { 
        phi[i] = i; 
    } 
  
    for (int i = 2; i <= n1; i++) { 
        if (phi[i] == i) { 
            phi[i] = i - 1; 
            for (int j = 2 * i; j <= n1; j += i) { 
                phi[j] = (phi[j] * (i - 1)) / i; 
            } 
        } 
    } 
} 
  
// Function to return the required LCM sum 
void func(int m) 
{ 
    ETF(); 
  
    for (int i = 1; i <= n1; i++) { 
  
        // Summation of d * ETF(d) where 
        // d belongs to set of divisors of n 
        for (int j = i; j <= n1; j += i) { 
            ans[j] += (i * phi[i]); 
        } 
    } 
  
    ll answer = ans[m]; 
    answer = (answer + 1) * m; 
    answer = answer / 2; 
    cout<<answer; 
} 
