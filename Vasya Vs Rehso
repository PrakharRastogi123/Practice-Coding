#include<bits/stdc++.h>
using namespace std;
struct node{
    int a,b,i;
    node(){
        a=b=i=0;
    }
};
node arr[1000001];
node tree[3*1000001];
void bt(int si,int ei,int ti){
    if(si==ei){
    tree[ti].a=arr[si].a;
    tree[ti].b=arr[si].b;
    tree[ti].i=arr[si].i;
        return;
    }
    int mid=(si+ei)/2;
    bt(si,mid,2*ti);
    bt(mid+1,ei,2*ti+1);
    if(tree[2*ti].a>tree[2*ti+1].a) tree[ti]=tree[2*ti];
    else if(tree[2*ti].a<tree[2*ti+1].a) tree[ti]=tree[2*ti+1];
    else{
        if(tree[2*ti].b==tree[2*ti+1].b){
            if(tree[2*ti].i<tree[2*ti+1].i){
                tree[ti]=tree[2*ti];
            }
            else{
                tree[ti]=tree[2*ti+1];
            }
        }
        else{
            if(tree[2*ti].b<tree[2*ti+1].b){
                tree[ti]=tree[2*ti];
            }
            else{
                tree[ti]=tree[2*ti+1];
            }
        }
    }
}
node querry(int si,int ei,int ti,int l,int r){
    if(si>r || ei<l){
        node nullNode;
        return nullNode;
    }
    if(si>=l && ei<=r){
        return tree[ti];
    }
    int mid=(si+ei)/2;
    node lft=querry(si,mid,2*ti,l,r);
    node rgt=querry(mid+1,ei,2*ti+1,l,r);
    node res;
    if(lft.a<rgt.a) res=rgt;
    else if(lft.a>rgt.a) res=lft;
    else{
        if(lft.b==rgt.b){
            if(lft.i<rgt.i){
                res=lft;
            }
            else{
                res=rgt;
            }
        }
        else{
            if(lft.b<rgt.b){
                res=lft;
            }
            else{
                res=rgt;
            }
        }
    }
    return res;
}
int main() {
 int n;cin>>n;
    for(int ik=0;ik<n;ik++){
    cin>>arr[ik].a;
    arr[ik].i=ik;
    }
    for(int i=0;i<n;i++){
    cin>>arr[i].b;
    }
    bt(0,n-1,1);
    /*for(int ik=0;ik<n;ik++){
    cout<<tree[ik].a<<tree[ik].b<<tree[ik].i<<endl;;
    }*/
    int t;cin>>t;
    while(t--){
        int l,r;cin>>l>>r;
        node res=querry(0,n-1,1,l-1,r-1);
        cout<<res.i+1<<endl;
    }
}
